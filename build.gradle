plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group 'com.github.nigthcrawlerx1.jdacommands'
archivesBaseName = "JDA-Commands-API"
def ver = new Version(major: 0, minor: 0, revision: 5)
version ver.toString()

sourceCompatibility = targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    compile 'net.dv8tion:JDA:4.2.0_198'
    compile 'org.reflections:reflections:0.9.12'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/JDACommandInfo.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'JDACommandInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath

    dependsOn generateJavaSources
}

shadowJar {
    classifier = "withDependencies"
    exclude 'module-info.class'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"

    }
}
